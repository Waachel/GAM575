// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Address.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Address_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Address_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Address_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Address_2eproto {
  static const ::uint32_t offsets[];
};
class Address_proto;
struct Address_protoDefaultTypeInternal;
extern Address_protoDefaultTypeInternal _Address_proto_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Address_proto final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Address_proto) */ {
 public:
  inline Address_proto() : Address_proto(nullptr) {}
  ~Address_proto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Address_proto(::google::protobuf::internal::ConstantInitialized);

  Address_proto(const Address_proto& from);
  Address_proto(Address_proto&& from) noexcept
    : Address_proto() {
    *this = ::std::move(from);
  }

  inline Address_proto& operator=(const Address_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address_proto& operator=(Address_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Address_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address_proto* internal_default_instance() {
    return reinterpret_cast<const Address_proto*>(
               &_Address_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address_proto& a, Address_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Address_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address_proto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Address_proto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Address_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Address_proto& from);
  void MergeFrom(const Address_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Address_proto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Address_proto";
  }
  protected:
  explicit Address_proto(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoNameFieldNumber = 1,
    kPoAddrFieldNumber = 2,
    kPoPhoneFieldNumber = 3,
  };
  // optional bytes poName = 1;
  bool has_poname() const;
  void clear_poname() ;
  const std::string& poname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_poname(Arg_&& arg, Args_... args);
  std::string* mutable_poname();
  PROTOBUF_NODISCARD std::string* release_poname();
  void set_allocated_poname(std::string* ptr);

  private:
  const std::string& _internal_poname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poname(
      const std::string& value);
  std::string* _internal_mutable_poname();

  public:
  // optional bytes poAddr = 2;
  bool has_poaddr() const;
  void clear_poaddr() ;
  const std::string& poaddr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_poaddr(Arg_&& arg, Args_... args);
  std::string* mutable_poaddr();
  PROTOBUF_NODISCARD std::string* release_poaddr();
  void set_allocated_poaddr(std::string* ptr);

  private:
  const std::string& _internal_poaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poaddr(
      const std::string& value);
  std::string* _internal_mutable_poaddr();

  public:
  // optional bytes poPhone = 3;
  bool has_pophone() const;
  void clear_pophone() ;
  const std::string& pophone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pophone(Arg_&& arg, Args_... args);
  std::string* mutable_pophone();
  PROTOBUF_NODISCARD std::string* release_pophone();
  void set_allocated_pophone(std::string* ptr);

  private:
  const std::string& _internal_pophone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pophone(
      const std::string& value);
  std::string* _internal_mutable_pophone();

  public:
  // @@protoc_insertion_point(class_scope:Address_proto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr poname_;
    ::google::protobuf::internal::ArenaStringPtr poaddr_;
    ::google::protobuf::internal::ArenaStringPtr pophone_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Address_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Address_proto

// optional bytes poName = 1;
inline bool Address_proto::has_poname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Address_proto::clear_poname() {
  _impl_.poname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Address_proto::poname() const {
  // @@protoc_insertion_point(field_get:Address_proto.poName)
  return _internal_poname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Address_proto::set_poname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.poname_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Address_proto.poName)
}
inline std::string* Address_proto::mutable_poname() {
  std::string* _s = _internal_mutable_poname();
  // @@protoc_insertion_point(field_mutable:Address_proto.poName)
  return _s;
}
inline const std::string& Address_proto::_internal_poname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.poname_.Get();
}
inline void Address_proto::_internal_set_poname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.poname_.Set(value, GetArenaForAllocation());
}
inline std::string* Address_proto::_internal_mutable_poname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.poname_.Mutable( GetArenaForAllocation());
}
inline std::string* Address_proto::release_poname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Address_proto.poName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.poname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.poname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Address_proto::set_allocated_poname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.poname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.poname_.IsDefault()) {
          _impl_.poname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Address_proto.poName)
}

// optional bytes poAddr = 2;
inline bool Address_proto::has_poaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Address_proto::clear_poaddr() {
  _impl_.poaddr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Address_proto::poaddr() const {
  // @@protoc_insertion_point(field_get:Address_proto.poAddr)
  return _internal_poaddr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Address_proto::set_poaddr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.poaddr_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Address_proto.poAddr)
}
inline std::string* Address_proto::mutable_poaddr() {
  std::string* _s = _internal_mutable_poaddr();
  // @@protoc_insertion_point(field_mutable:Address_proto.poAddr)
  return _s;
}
inline const std::string& Address_proto::_internal_poaddr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.poaddr_.Get();
}
inline void Address_proto::_internal_set_poaddr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.poaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* Address_proto::_internal_mutable_poaddr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.poaddr_.Mutable( GetArenaForAllocation());
}
inline std::string* Address_proto::release_poaddr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Address_proto.poAddr)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.poaddr_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.poaddr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Address_proto::set_allocated_poaddr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.poaddr_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.poaddr_.IsDefault()) {
          _impl_.poaddr_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Address_proto.poAddr)
}

// optional bytes poPhone = 3;
inline bool Address_proto::has_pophone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Address_proto::clear_pophone() {
  _impl_.pophone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Address_proto::pophone() const {
  // @@protoc_insertion_point(field_get:Address_proto.poPhone)
  return _internal_pophone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Address_proto::set_pophone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pophone_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Address_proto.poPhone)
}
inline std::string* Address_proto::mutable_pophone() {
  std::string* _s = _internal_mutable_pophone();
  // @@protoc_insertion_point(field_mutable:Address_proto.poPhone)
  return _s;
}
inline const std::string& Address_proto::_internal_pophone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pophone_.Get();
}
inline void Address_proto::_internal_set_pophone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pophone_.Set(value, GetArenaForAllocation());
}
inline std::string* Address_proto::_internal_mutable_pophone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.pophone_.Mutable( GetArenaForAllocation());
}
inline std::string* Address_proto::release_pophone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Address_proto.poPhone)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.pophone_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pophone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Address_proto::set_allocated_pophone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pophone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pophone_.IsDefault()) {
          _impl_.pophone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Address_proto.poPhone)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Address_2eproto_2epb_2eh
