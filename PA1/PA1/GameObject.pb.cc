// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameObject.proto

#include "GameObject.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR GameObject_proto::GameObject_proto(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.pomatrix_)*/ nullptr,
      /*decltype(_impl_.povect_)*/ nullptr,
      /*decltype(_impl_.va_)*/ nullptr,
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.i_)*/ 0,
    } {}
struct GameObject_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameObject_protoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameObject_protoDefaultTypeInternal() {}
  union {
    GameObject_proto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameObject_protoDefaultTypeInternal _GameObject_proto_default_instance_;
// ===================================================================

class GameObject_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<GameObject_proto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_._has_bits_);
  static const ::Matrix_proto& pomatrix(const GameObject_proto* msg);
  static void set_has_pomatrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vect_proto& povect(const GameObject_proto* msg);
  static void set_has_povect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vect_proto& va(const GameObject_proto* msg);
  static void set_has_va(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Matrix_proto& GameObject_proto::_Internal::pomatrix(const GameObject_proto* msg) {
  return *msg->_impl_.pomatrix_;
}
const ::Vect_proto& GameObject_proto::_Internal::povect(const GameObject_proto* msg) {
  return *msg->_impl_.povect_;
}
const ::Vect_proto& GameObject_proto::_Internal::va(const GameObject_proto* msg) {
  return *msg->_impl_.va_;
}
void GameObject_proto::clear_pomatrix() {
  if (_impl_.pomatrix_ != nullptr) _impl_.pomatrix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameObject_proto::clear_povect() {
  if (_impl_.povect_ != nullptr) _impl_.povect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GameObject_proto::clear_va() {
  if (_impl_.va_ != nullptr) _impl_.va_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GameObject_proto::GameObject_proto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameObject_proto)
}
GameObject_proto::GameObject_proto(const GameObject_proto& from) : ::google::protobuf::MessageLite() {
  GameObject_proto* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pomatrix_){nullptr},
      decltype(_impl_.povect_){nullptr},
      decltype(_impl_.va_){nullptr},
      decltype(_impl_.x_){},
      decltype(_impl_.i_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pomatrix_ = new ::Matrix_proto(*from._impl_.pomatrix_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.povect_ = new ::Vect_proto(*from._impl_.povect_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.va_ = new ::Vect_proto(*from._impl_.va_);
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.i_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.i_));

  // @@protoc_insertion_point(copy_constructor:GameObject_proto)
}
inline void GameObject_proto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pomatrix_){nullptr},
      decltype(_impl_.povect_){nullptr},
      decltype(_impl_.va_){nullptr},
      decltype(_impl_.x_){0},
      decltype(_impl_.i_){0},
  };
}
GameObject_proto::~GameObject_proto() {
  // @@protoc_insertion_point(destructor:GameObject_proto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GameObject_proto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pomatrix_;
  if (this != internal_default_instance()) delete _impl_.povect_;
  if (this != internal_default_instance()) delete _impl_.va_;
}
void GameObject_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameObject_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:GameObject_proto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pomatrix_ != nullptr);
      _impl_.pomatrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.povect_ != nullptr);
      _impl_.povect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.va_ != nullptr);
      _impl_.va_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.i_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.i_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GameObject_proto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> GameObject_proto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameObject_proto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .Matrix_proto poMatrix = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.pomatrix_)}},
    // optional .Vect_proto poVect = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.povect_)}},
    // optional float x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 3, 0, PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.x_)}},
    // optional sint32 i = 4;
    {::_pbi::TcParser::FastZ32S1,
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.i_)}},
    // optional .Vect_proto vA = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.va_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .Matrix_proto poMatrix = 1;
    {PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.pomatrix_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vect_proto poVect = 2;
    {PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.povect_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float x = 3;
    {PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.x_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional sint32 i = 4;
    {PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.i_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt32)},
    // optional .Vect_proto vA = 5;
    {PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.va_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Matrix_proto>()},
    {::_pbi::TcParser::GetTable<::Vect_proto>()},
    {::_pbi::TcParser::GetTable<::Vect_proto>()},
  }}, {{
  }},
};

::uint8_t* GameObject_proto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameObject_proto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Matrix_proto poMatrix = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pomatrix(this),
        _Internal::pomatrix(this).GetCachedSize(), target, stream);
  }

  // optional .Vect_proto poVect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::povect(this),
        _Internal::povect(this).GetCachedSize(), target, stream);
  }

  // optional float x = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_x(), target);
  }

  // optional sint32 i = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_i(), target);
  }

  // optional .Vect_proto vA = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::va(this),
        _Internal::va(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameObject_proto)
  return target;
}

::size_t GameObject_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameObject_proto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Matrix_proto poMatrix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.pomatrix_);
    }

    // optional .Vect_proto poVect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.povect_);
    }

    // optional .Vect_proto vA = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.va_);
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional sint32 i = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
          this->_internal_i());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameObject_proto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GameObject_proto*>(
      &from));
}

void GameObject_proto::MergeFrom(const GameObject_proto& from) {
  GameObject_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GameObject_proto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pomatrix()->::Matrix_proto::MergeFrom(
          from._internal_pomatrix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_povect()->::Vect_proto::MergeFrom(
          from._internal_povect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_va()->::Vect_proto::MergeFrom(
          from._internal_va());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.i_ = from._impl_.i_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GameObject_proto::CopyFrom(const GameObject_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameObject_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameObject_proto::IsInitialized() const {
  return true;
}

void GameObject_proto::InternalSwap(GameObject_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.i_)
      + sizeof(GameObject_proto::_impl_.i_)
      - PROTOBUF_FIELD_OFFSET(GameObject_proto, _impl_.pomatrix_)>(
          reinterpret_cast<char*>(&_impl_.pomatrix_),
          reinterpret_cast<char*>(&other->_impl_.pomatrix_));
}

std::string GameObject_proto::GetTypeName() const {
  return "GameObject_proto";
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
