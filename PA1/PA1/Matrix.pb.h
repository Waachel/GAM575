// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Matrix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Matrix_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Matrix_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Matrix_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Matrix_2eproto {
  static const ::uint32_t offsets[];
};
class Matrix_proto;
struct Matrix_protoDefaultTypeInternal;
extern Matrix_protoDefaultTypeInternal _Matrix_proto_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Matrix_proto final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Matrix_proto) */ {
 public:
  inline Matrix_proto() : Matrix_proto(nullptr) {}
  ~Matrix_proto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Matrix_proto(::google::protobuf::internal::ConstantInitialized);

  Matrix_proto(const Matrix_proto& from);
  Matrix_proto(Matrix_proto&& from) noexcept
    : Matrix_proto() {
    *this = ::std::move(from);
  }

  inline Matrix_proto& operator=(const Matrix_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix_proto& operator=(Matrix_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Matrix_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix_proto* internal_default_instance() {
    return reinterpret_cast<const Matrix_proto*>(
               &_Matrix_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix_proto& a, Matrix_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix_proto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Matrix_proto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Matrix_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Matrix_proto& from);
  void MergeFrom(const Matrix_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Matrix_proto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Matrix_proto";
  }
  protected:
  explicit Matrix_proto(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM0FieldNumber = 1,
    kM1FieldNumber = 2,
    kM2FieldNumber = 3,
    kM3FieldNumber = 4,
    kM4FieldNumber = 5,
    kM5FieldNumber = 6,
    kM6FieldNumber = 7,
    kM7FieldNumber = 8,
    kM8FieldNumber = 9,
    kM9FieldNumber = 10,
    kM10FieldNumber = 11,
    kM11FieldNumber = 12,
    kM12FieldNumber = 13,
    kM13FieldNumber = 14,
    kM14FieldNumber = 15,
    kM15FieldNumber = 16,
  };
  // optional float m0 = 1;
  bool has_m0() const;
  void clear_m0() ;
  float m0() const;
  void set_m0(float value);

  private:
  float _internal_m0() const;
  void _internal_set_m0(float value);

  public:
  // optional float m1 = 2;
  bool has_m1() const;
  void clear_m1() ;
  float m1() const;
  void set_m1(float value);

  private:
  float _internal_m1() const;
  void _internal_set_m1(float value);

  public:
  // optional float m2 = 3;
  bool has_m2() const;
  void clear_m2() ;
  float m2() const;
  void set_m2(float value);

  private:
  float _internal_m2() const;
  void _internal_set_m2(float value);

  public:
  // optional float m3 = 4;
  bool has_m3() const;
  void clear_m3() ;
  float m3() const;
  void set_m3(float value);

  private:
  float _internal_m3() const;
  void _internal_set_m3(float value);

  public:
  // optional float m4 = 5;
  bool has_m4() const;
  void clear_m4() ;
  float m4() const;
  void set_m4(float value);

  private:
  float _internal_m4() const;
  void _internal_set_m4(float value);

  public:
  // optional float m5 = 6;
  bool has_m5() const;
  void clear_m5() ;
  float m5() const;
  void set_m5(float value);

  private:
  float _internal_m5() const;
  void _internal_set_m5(float value);

  public:
  // optional float m6 = 7;
  bool has_m6() const;
  void clear_m6() ;
  float m6() const;
  void set_m6(float value);

  private:
  float _internal_m6() const;
  void _internal_set_m6(float value);

  public:
  // optional float m7 = 8;
  bool has_m7() const;
  void clear_m7() ;
  float m7() const;
  void set_m7(float value);

  private:
  float _internal_m7() const;
  void _internal_set_m7(float value);

  public:
  // optional float m8 = 9;
  bool has_m8() const;
  void clear_m8() ;
  float m8() const;
  void set_m8(float value);

  private:
  float _internal_m8() const;
  void _internal_set_m8(float value);

  public:
  // optional float m9 = 10;
  bool has_m9() const;
  void clear_m9() ;
  float m9() const;
  void set_m9(float value);

  private:
  float _internal_m9() const;
  void _internal_set_m9(float value);

  public:
  // optional float m10 = 11;
  bool has_m10() const;
  void clear_m10() ;
  float m10() const;
  void set_m10(float value);

  private:
  float _internal_m10() const;
  void _internal_set_m10(float value);

  public:
  // optional float m11 = 12;
  bool has_m11() const;
  void clear_m11() ;
  float m11() const;
  void set_m11(float value);

  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);

  public:
  // optional float m12 = 13;
  bool has_m12() const;
  void clear_m12() ;
  float m12() const;
  void set_m12(float value);

  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);

  public:
  // optional float m13 = 14;
  bool has_m13() const;
  void clear_m13() ;
  float m13() const;
  void set_m13(float value);

  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);

  public:
  // optional float m14 = 15;
  bool has_m14() const;
  void clear_m14() ;
  float m14() const;
  void set_m14(float value);

  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);

  public:
  // optional float m15 = 16;
  bool has_m15() const;
  void clear_m15() ;
  float m15() const;
  void set_m15(float value);

  private:
  float _internal_m15() const;
  void _internal_set_m15(float value);

  public:
  // @@protoc_insertion_point(class_scope:Matrix_proto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 16, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float m0_;
    float m1_;
    float m2_;
    float m3_;
    float m4_;
    float m5_;
    float m6_;
    float m7_;
    float m8_;
    float m9_;
    float m10_;
    float m11_;
    float m12_;
    float m13_;
    float m14_;
    float m15_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Matrix_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Matrix_proto

// optional float m0 = 1;
inline bool Matrix_proto::has_m0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Matrix_proto::clear_m0() {
  _impl_.m0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Matrix_proto::m0() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m0)
  return _internal_m0();
}
inline void Matrix_proto::set_m0(float value) {
  _internal_set_m0(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m0)
}
inline float Matrix_proto::_internal_m0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m0_;
}
inline void Matrix_proto::_internal_set_m0(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m0_ = value;
}

// optional float m1 = 2;
inline bool Matrix_proto::has_m1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Matrix_proto::clear_m1() {
  _impl_.m1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Matrix_proto::m1() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m1)
  return _internal_m1();
}
inline void Matrix_proto::set_m1(float value) {
  _internal_set_m1(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m1)
}
inline float Matrix_proto::_internal_m1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m1_;
}
inline void Matrix_proto::_internal_set_m1(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m1_ = value;
}

// optional float m2 = 3;
inline bool Matrix_proto::has_m2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Matrix_proto::clear_m2() {
  _impl_.m2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Matrix_proto::m2() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m2)
  return _internal_m2();
}
inline void Matrix_proto::set_m2(float value) {
  _internal_set_m2(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m2)
}
inline float Matrix_proto::_internal_m2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m2_;
}
inline void Matrix_proto::_internal_set_m2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m2_ = value;
}

// optional float m3 = 4;
inline bool Matrix_proto::has_m3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Matrix_proto::clear_m3() {
  _impl_.m3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Matrix_proto::m3() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m3)
  return _internal_m3();
}
inline void Matrix_proto::set_m3(float value) {
  _internal_set_m3(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m3)
}
inline float Matrix_proto::_internal_m3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m3_;
}
inline void Matrix_proto::_internal_set_m3(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m3_ = value;
}

// optional float m4 = 5;
inline bool Matrix_proto::has_m4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Matrix_proto::clear_m4() {
  _impl_.m4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Matrix_proto::m4() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m4)
  return _internal_m4();
}
inline void Matrix_proto::set_m4(float value) {
  _internal_set_m4(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m4)
}
inline float Matrix_proto::_internal_m4() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m4_;
}
inline void Matrix_proto::_internal_set_m4(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.m4_ = value;
}

// optional float m5 = 6;
inline bool Matrix_proto::has_m5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Matrix_proto::clear_m5() {
  _impl_.m5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Matrix_proto::m5() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m5)
  return _internal_m5();
}
inline void Matrix_proto::set_m5(float value) {
  _internal_set_m5(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m5)
}
inline float Matrix_proto::_internal_m5() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m5_;
}
inline void Matrix_proto::_internal_set_m5(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.m5_ = value;
}

// optional float m6 = 7;
inline bool Matrix_proto::has_m6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Matrix_proto::clear_m6() {
  _impl_.m6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Matrix_proto::m6() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m6)
  return _internal_m6();
}
inline void Matrix_proto::set_m6(float value) {
  _internal_set_m6(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m6)
}
inline float Matrix_proto::_internal_m6() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m6_;
}
inline void Matrix_proto::_internal_set_m6(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.m6_ = value;
}

// optional float m7 = 8;
inline bool Matrix_proto::has_m7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Matrix_proto::clear_m7() {
  _impl_.m7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Matrix_proto::m7() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m7)
  return _internal_m7();
}
inline void Matrix_proto::set_m7(float value) {
  _internal_set_m7(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m7)
}
inline float Matrix_proto::_internal_m7() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m7_;
}
inline void Matrix_proto::_internal_set_m7(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.m7_ = value;
}

// optional float m8 = 9;
inline bool Matrix_proto::has_m8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Matrix_proto::clear_m8() {
  _impl_.m8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Matrix_proto::m8() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m8)
  return _internal_m8();
}
inline void Matrix_proto::set_m8(float value) {
  _internal_set_m8(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m8)
}
inline float Matrix_proto::_internal_m8() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m8_;
}
inline void Matrix_proto::_internal_set_m8(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.m8_ = value;
}

// optional float m9 = 10;
inline bool Matrix_proto::has_m9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Matrix_proto::clear_m9() {
  _impl_.m9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Matrix_proto::m9() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m9)
  return _internal_m9();
}
inline void Matrix_proto::set_m9(float value) {
  _internal_set_m9(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m9)
}
inline float Matrix_proto::_internal_m9() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m9_;
}
inline void Matrix_proto::_internal_set_m9(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.m9_ = value;
}

// optional float m10 = 11;
inline bool Matrix_proto::has_m10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Matrix_proto::clear_m10() {
  _impl_.m10_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Matrix_proto::m10() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m10)
  return _internal_m10();
}
inline void Matrix_proto::set_m10(float value) {
  _internal_set_m10(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m10)
}
inline float Matrix_proto::_internal_m10() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m10_;
}
inline void Matrix_proto::_internal_set_m10(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.m10_ = value;
}

// optional float m11 = 12;
inline bool Matrix_proto::has_m11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Matrix_proto::clear_m11() {
  _impl_.m11_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Matrix_proto::m11() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m11)
  return _internal_m11();
}
inline void Matrix_proto::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m11)
}
inline float Matrix_proto::_internal_m11() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m11_;
}
inline void Matrix_proto::_internal_set_m11(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.m11_ = value;
}

// optional float m12 = 13;
inline bool Matrix_proto::has_m12() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Matrix_proto::clear_m12() {
  _impl_.m12_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float Matrix_proto::m12() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m12)
  return _internal_m12();
}
inline void Matrix_proto::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m12)
}
inline float Matrix_proto::_internal_m12() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m12_;
}
inline void Matrix_proto::_internal_set_m12(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.m12_ = value;
}

// optional float m13 = 14;
inline bool Matrix_proto::has_m13() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Matrix_proto::clear_m13() {
  _impl_.m13_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float Matrix_proto::m13() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m13)
  return _internal_m13();
}
inline void Matrix_proto::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m13)
}
inline float Matrix_proto::_internal_m13() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m13_;
}
inline void Matrix_proto::_internal_set_m13(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.m13_ = value;
}

// optional float m14 = 15;
inline bool Matrix_proto::has_m14() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Matrix_proto::clear_m14() {
  _impl_.m14_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Matrix_proto::m14() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m14)
  return _internal_m14();
}
inline void Matrix_proto::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m14)
}
inline float Matrix_proto::_internal_m14() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m14_;
}
inline void Matrix_proto::_internal_set_m14(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.m14_ = value;
}

// optional float m15 = 16;
inline bool Matrix_proto::has_m15() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Matrix_proto::clear_m15() {
  _impl_.m15_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float Matrix_proto::m15() const {
  // @@protoc_insertion_point(field_get:Matrix_proto.m15)
  return _internal_m15();
}
inline void Matrix_proto::set_m15(float value) {
  _internal_set_m15(value);
  // @@protoc_insertion_point(field_set:Matrix_proto.m15)
}
inline float Matrix_proto::_internal_m15() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m15_;
}
inline void Matrix_proto::_internal_set_m15(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.m15_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Matrix_2eproto_2epb_2eh
